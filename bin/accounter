#!/usr/bin/env escript
%% This is an -*- erlang -*- file.

%% Copyright 2015 Hakan Mattsson
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.

-module(accounter_main).

main([]) ->
    ThisEscript = filename:absname(escript:script_name()),
    AppDir = filename:dirname(filename:dirname(ThisEscript)),
    WorkDir = filename:join([AppDir, "examples", "kkss"]),
    main(["--dir", WorkDir]);
main(["--dir", WorkDir]) ->
    ThisEscript = filename:absname(escript:script_name()),
    AppDir = filename:dirname(filename:dirname(ThisEscript)),
    Port = 8080,
    start_yaws(AppDir, WorkDir, Port),
    start_app(AppDir),
    io:format("Work dir: ~s\n", [WorkDir]),
    io:format("http://localhost:~p\n", [Port]),
    wait().

start_yaws(AppDir, WorkDir, Port) ->
    io:format("Start yaws...", []),
    Id = "accounter",
    LogDir = filename:join([WorkDir, "logs"]),
    file:make_dir(LogDir),
    GconfList =
        [
         {include_dir,      [filename:join([AppDir, "include"])]},
         {ebin_dir,         [filename:join([AppDir, "ebin"])]},
         {logdir,           LogDir},
         {copy_errlog,      true},
         {fail_on_bind_err, true},
         {resolve_hostname, false},
         {trace,            false},
         {id, Id}
        ],
    DocRoot = filename:join([AppDir, "www"]),
    SconfList =
        [
         {listen, {127,0,0,1}},
         {port, Port},
         %% {docroot, DocRoot},
         {xtra_docroots, [WorkDir]},
         {dir_listings, false},
         {opaque,
          [
           {work_dir, WorkDir}
          ]}
        ],
    YawsEbinDir = filename:join([AppDir, "lib", "yaws", "ebin"]),
    {true, YawsEbinDir} = {code:add_patha(YawsEbinDir), YawsEbinDir},
    {ok, yaws_start} =
        {yaws:start_embedded(DocRoot, SconfList, GconfList, Id), yaws_start},
    io:format("done.\n", []).

start_app(AppDir) ->
    io:format("Start accounter...", []),
    AppEbinDir = filename:join([AppDir, "ebin"]),
    {true, AppEbinDir} = {code:add_patha(AppEbinDir), AppEbinDir},
    {ok, accounter_start} = {application:start(accounter), accounter_start},
    io:format("done.\n", []).

wait() ->
    case io:get_line("Enter quit to exit \n") of
        "q" ++_ -> halt(0);
        "e" ++_ -> halt(0);
        _       -> wait()
    end.
