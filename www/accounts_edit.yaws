<html>

<erl>

%% Copyright 2015 Hakan Mattsson
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.

-include_lib("accounter/include/accounter.hrl").

out(Args) ->
    Name = accounter:get_book_name(Args),
    Book = accounter_csv:import_book(Args, Name),
    Bindings = accounter:get_bindings(Args),
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    [
     {ssi, "header.ssi", "%%", Bindings},
     {ssi, "buttons.ssi", "%%", Bindings},
     {bindings, Bindings},
     {ehtml,
      [
       {h2,[], [{pre_html, [AssociationL, " ", Name]}]},
       gen_errors(Args, Bindings, Book),
       gen_edit(Args, Bindings, Book),
       {ssi, "footer.ssi","%%", Bindings}
      ]
     }].

gen_errors(Args, Bindings, Book) when Book#book.errors =:= [] ->
    [];
gen_errors(Args, Bindings, Book) when is_record(Book, book) ->
    UpdateL = ?BINDING("UPDATE", Bindings),
    ErrorMsgsL = ?BINDING("ERROR_MSGS", Bindings),
    TypeL = ?BINDING("TYPE", Bindings),
    IdL = ?BINDING("ID", Bindings),
    ErrorsL = ?BINDING("ERRORS", Bindings),
    DescriptionL = ?BINDING("DESCRIPTION", Bindings),
    [
     {h3,[],
      [
       {pre_html, UpdateL},
       {p, [], []},
       {table, [{border,2}, {cellspacing,1}, {cellpadding,1}],
        [
         {tr, [{border,2}],
          [{th, [{align,left}], {pre_html, ?TO_HTML(TypeL)}},
           {th, [{align,left}], {pre_html, ?TO_HTML(IdL)}},
           {th, [{align,left}], {pre_html, ?TO_HTML(ErrorsL)}},
           {th, [{align,left}], {pre_html, ?TO_HTML(DescriptionL)}}
          ]} |
         [
          {tr, [{border,1}],
           [
            {td, [], {pre_html, ?BINDING(string:to_upper(atom_to_list(Type)),
                                         Bindings)}},
            {td, [], id_to_href(Args, Type, Id)},
            {td, [], {pre_html, ?TO_HTML(Val)}},
            {td, [], {pre_html, ?TO_HTML(Reason)}}
           ]} || #error{type = Type,
                        id = Id,
                        value = Val,
                        reason = Reason} <- Book#book.errors]
        ]}
      ]}
    ].

id_to_href(Args, account, Id) ->
    {a, [{href, [?FQ(Args, [{"account_id", ?TO_HTML(Id)}])]}],
     {pre_html, ?TO_HTML(Id)}};
id_to_href(_Args, _Type, Id) ->
    {a, [], {pre_html, ?TO_HTML(Id)}}.

gen_edit(Args, Bindings, Book)  when is_record(Book, book) ->
    RegisterL = ?BINDING("EDIT_ACCOUNTS", Bindings),
    [
     {h3,[],
      [
       {pre_html, [RegisterL]},
       {p, [], []},
       {form,
        [{method, post},
         {name, edit},
         {action,
          [
           "/accounts_commit.yaws",
           ?FQ(Args, [{"name", Book#book.name}])
          ]
         },
         {autocomplete, "off"}],
        gen_accounts(Bindings, Book)
       }
      ]}
    ].

gen_accounts(Bindings, Book) ->
    IdL = ?BINDING("ID", Bindings),
    NameL = ?BINDING("NAME", Bindings),
    DescL = ?BINDING("DESCRIPTION", Bindings),
    TypeL = ?BINDING("TYPE", Bindings),
    BudgetL = ?BINDING("BUDGET", Bindings),
    InResultL = ?BINDING("IN_RESULT", Bindings),
    InBalanceL = ?BINDING("IN_BALANCE", Bindings),
    SaveL = ?BINDING("SAVE", Bindings),
    [
     {table, [{border, 0}],
      [{tr, [],
        [
         {td, [],
          {table, [{border, 2}, {cellspacing, 1},{cellpadding, 1}],
           [
            {tr, [{border, 0}],
             [
              {th, [{align, left}], {pre_html, ?TO_HTML(IdL)}},
              {th, [{align, left}], {pre_html, ?TO_HTML(NameL)}},
              {th, [{align, left}], {pre_html, ?TO_HTML(DescL)}},
              {th, [{align, left}], {pre_html, ?TO_HTML(TypeL)}},
              {th, [{align, left}], {pre_html, ?TO_HTML(BudgetL)}},
              {th, [{align, left}], {pre_html, ?TO_HTML(InResultL)}},
              {th, [{align, left}], {pre_html, ?TO_HTML(InBalanceL)}}
             ]},
            gen_account("", "", "", "", "", "", "") |
            [gen_account(A) || A <- Book#book.accounts]
           ]}},
         {td, [], {input, [{type, submit}, {value, ?TO_HTML(SaveL)}]}}
        ]}]}
    ].

gen_account(#account{id = Id,
                     name = Name,
                     desc = Desc,
                     type = Type,
                     budget = Budget,
                     in_result = InResult,
                     in_balance = InBalance} = A) ->
    gen_account(Id, Name, Desc, Type, Budget, InResult, InBalance).

gen_account(Id, Name, Desc, Type, undefined, InResult, InBalance) ->
    gen_account(Id, Name, Desc, Type, "", InResult, InBalance);
gen_account(Id, Name, Desc, Type, Budget, InResult, InBalance) ->
    {tr, [],
     [
      {td,
       [{align, left}],
       {input, [{name, id},
                {type, text},
                {value, ?TO_HTML(Id)}]}},
      {td,
       [{align, left}],
       {input, [{name, name},
                {type, text},
                {value, ?TO_HTML(Name)}]}},
      {td,
       [{align, left}],
       {input, [{name, desc},
                {type, text},
                {value, Desc}]}},
      {td,
       [{align, left}],
       {input, [{name, type},
                {type, text},
                {value, Type}]}},
      {td,
       [{align, left}],
       {input, [{name, budget},
                {type, text},
                {value, Budget}]}},
      {td,
       [{align, left}],
       {input, [{name, in_result},
                {type, text},
                {value, InResult}]}},
      {td,
       [{align, left}],
       {input, [{name, in_balance},
                {type, text},
                {value, InBalance}]}}
     ]}.

</erl>

</html>
