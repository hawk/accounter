<html>

<erl>

%% Copyright 2015 Hakan Mattsson
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.

-include_lib("accounter/include/accounter.hrl").

out(Args) ->
    Cwd  = filename:dirname(Args#arg.fullpath),
    Name = accounter:get_latest_book_name(Args),
    Book = accounter_csv:import_book(Args, Name),
    BooksDir = accounter:get_books_dir(Args),
    Dir = filename:join([BooksDir, Name]),
    Delim = ";",
    V = parse_voucher_post(Args, Delim),
    Vid = V#voucher.id,
    HtmlVid = ?TO_HTML(Vid),
    NextId = accounter:get_latest_voucher_id(Book) + 1,
    ErrIds = [ErrId || #error{type = voucher, id = ErrId} <- Book#book.errors],
    ValidIds = [NextId | ErrIds],
    WantedName = accounter:get_book_name(Args),
    IsValid = lists:member(Vid, ValidIds),
    if
        WantedName =/= Name ->
            %% BUGBUG: Type = book/year
            exit({error, [voucher, Vid, WantedName,
                          "Invalid year." ++ Name ++ " expected.",
                          ?FILE, ?LINE]});
        not IsValid ->
            exit({error, [voucher, Vid, Vid,
                          "Invalid voucher id",
                          ?FILE, ?LINE]});
        true ->
            accounter_csv:export_voucher(Dir, V, Delim),
            case ErrIds of
                [] ->
                    {redirect_local,
                     ["/reports.yaws",
                      accounter_html:forward_query(Args, [{"name", Name}]),
                      "#voucher_", HtmlVid
                     ]};
                _ ->
                    {redirect_local,
                     ["/register.yaws",
                      accounter_html:forward_query(Args,
                                                   [{"name", Name},
                                                    {"voucher_id", HtmlVid}
                                                   ])
                     ]}
            end
    end.

parse_voucher_post(Args, Delim) when is_list(Delim) ->
    [{"voucher", Vid}, {"date", Date}, {"text", Text} | Items] =
        yaws_api:parse_post(Args),
    BooksDir = accounter:get_books_dir(Args),
    CsvStyle = accounter_csv:csv_style(BooksDir),
    VoucherTokens = lists:concat([Vid, Delim, Date, Delim, Text]),
    Tokens = accounter_csv:to_tokens(VoucherTokens, hd(Delim)),
    case catch accounter_csv:tokens_to_vouchers(CsvStyle, Tokens, []) of
        [#voucher{} = V] ->
            VoucherItems = parse_items(CsvStyle, Items, Vid, Delim),
            {VoucherItems2, _Rem, _Errors} =
                accounter_check:amend_items(VoucherItems, V#voucher.id,
                                            [], [], []),
            %% io:format("V: ~p\n", [VoucherItems2]),
            %% VoucherItems3 = [I || I <- VoucherItems2, I#item.amount =/= 0],
            V#voucher{items = VoucherItems2};
        [#error{type   = Type,
                id     = Id,
                value  = Val,
                reason = Reason,
                file   = File,
                line   = Line}] ->
            exit({error, [Type, Id, Val, Reason, File, Line]})
    end.

parse_items(CsvStyle,
            [{"remark", ""}, {"debit", _}, {"credit", _},
             {"account", _} | Items], Vid, Delim) ->
    parse_items(CsvStyle, Items, Vid, Delim);
parse_items(CsvStyle,
            [{"remark", undefined}, {"debit", _}, {"credit", _},
             {"account", _} | Items], Vid, Delim) ->
    parse_items(CsvStyle, Items, Vid, Delim);
parse_items(CsvStyle,
            [{"remark", Remark}, {"debit", Debit}, {"credit", Credit},
             {"account", Account} | Items], Vid, Delim) ->
    ItemTokens = lists:concat([Vid, Delim, Account, Delim, Debit,
                               Delim, Credit, Delim, Remark]),
    Tokens = accounter_csv:to_tokens(ItemTokens, hd(Delim)),
    case accounter_csv:tokens_to_items(CsvStyle, Tokens, []) of
        [#item{} = I] ->
            [I | parse_items(CsvStyle, Items, Vid, Delim)];
        [#error{type   = Type,
                id     = Id,
                value  = Val,
                reason = Reason,
                file   = File,
                line   = Line}] ->
            exit({error, [Type, Id, Val, Reason, File, Line]})
    end;
parse_items(_CsvStyle, [], _Vid, _Delim) ->
    [].

</erl>

</html>
