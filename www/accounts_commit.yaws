<html>

<erl>

%% Copyright 2015 Hakan Mattsson
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.

-include_lib("accounter/include/accounter.hrl").

out(Args) ->
    Cwd  = filename:dirname(Args#arg.fullpath),
    Name = accounter:get_latest_book_name(Args),
    OldBook = accounter_csv:import_book(Args, Name),
    BooksDir = accounter:get_books_dir(Args),
    Delim = accounter_csv:get_field_delim(Args),
    Accounts = parse_accounts_post(Args, OldBook, Delim),
    WantedName = accounter:get_book_name(Args),
    if
        WantedName =/= Name ->
            %% BUGBUG: Type = book/year
            exit({error, [account, (hd(Accounts))#account.id, WantedName,
                          "Invalid year." ++ Name ++ " expected.",
                          ?FILE, ?LINE]});
        true ->
            NewBook = amend_book(OldBook, Accounts),
            accounter_csv:export_accounts(BooksDir, OldBook, NewBook, Delim),
            {redirect_local, ["/accounts_edit.yaws", ?FQ(Args, [{"name", Name}])]}
    end.

parse_accounts_post(Args, OldBook, Delim) ->
    Post = yaws_api:parse_post(Args),
    do_parse_accounts_post(Post, OldBook, Delim, []).

do_parse_accounts_post([{"id",""},
                        {"name",_Name},
                        {"desc",_Desc},
                        {"type",_Type},
                        {"budget",_Budget},
                        {"in_result",_InResult},
                        {"in_balance",_InBalance} | Post],
                       Book,
                       Delim,
                       Acc) ->
    %% Delete account without id
    do_parse_accounts_post(Post, Book, Delim, Acc);
do_parse_accounts_post([{"id",Id},
                        {"name",Name},
                        {"desc",Desc},
                        {"type",Type},
                        {"budget",Budget},
                        {"in_result",InResult},
                        {"in_balance",InBalance} | Post],
                       Book,
                       Delim,
                       Acc) ->
    Types = Book#book.types,
    case lists:keyfind(Type, #account_type.name, Types) of
        false ->
            exit({error, [Type, Id, Type, "unknown account type", ?FILE, ?LINE]});
        _AT ->
            ok
    end,
    CsvStyle = new_style,
    Chars = lists:flatten([[Id, [Delim], Name, [Delim], Type, [Delim],
                            Desc, [Delim], Budget, [Delim], InResult,
                            [Delim], InBalance]]),
    Tokens = accounter_csv:to_tokens(Chars, Delim),
    case catch accounter_csv:tokens_to_accounts(CsvStyle, Tokens, Types, []) of
        [#account{} = A] ->
            do_parse_accounts_post(Post, Book, Delim, [A | Acc]);
        #error{type   = ErrorType,
               id     = ErrorId,
               value  = ErrorVal,
               reason = Reason,
               file   = File,
               line   = Line} ->
            exit({error, [ErrorType, ErrorId, ErrorVal, Reason, File, Line]})
    end;
do_parse_accounts_post([], _Book, _Delim, Acc) ->
    lists:keysort(#account.id, Acc).

amend_book(OldBook, Accounts) ->
    NewBook = OldBook#book{accounts = Accounts},
    accounter_check:amend_book(NewBook).

</erl>

</html>
