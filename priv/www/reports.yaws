<html>

<erl>

%% Copyright 2015 Hakan Mattsson
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.

-include_lib("accounter/include/accounter.hrl").

out(Args) ->
    Name = accounter:get_book_name(Args),
    Book = accounter_csv:import_book(Args, Name),
    Report = accounter:get_var(Args, report, "all"),
    Bindings = accounter:get_bindings(Args),
    gen_reports(Args, Bindings, Book, Name, Report).

gen_reports(Args, Bindings, Book, Name, Report) when Report == "all" ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    ReportsL = ?BINDING("REPORTS", Bindings),
    BalanceReportL = ?BINDING("BALANCE_REPORT", Bindings),
    ResultReportL = ?BINDING("RESULT_REPORT", Bindings),
    ComparisonL = ?BINDING("COMPARISON", Bindings),
    [
     {ssi, "header.ssi", "%%", Bindings},
     {ssi, "buttons.ssi", "%%", Bindings},
     {bindings, Bindings},
     {ehtml,
      [
       {h3,[],
        [{pre_html, [AssociationL, " ", Name, " - ", ReportsL]},
         gen_index(Bindings),
         {hr},
         gen_errors(Bindings, Book),
         {br},
         {hr},
         gen_summary(Bindings, Book, balance, #account.balance, BalanceReportL),
         {br},
         {hr},
         gen_summary(Bindings, Book, result, #account.result, ResultReportL),
         {br},
         {hr},
         gen_budget(Bindings, Book),
         {br},
         {hr},
         gen_summary(Bindings, Book, comparison, #account.result, ComparisonL),
         {br},
         {hr},
         gen_journal(Args, Bindings, Book),
         {br},
         {hr},
         gen_ledge(Bindings, Book),
         {br},
         {hr},
         gen_print(Args, Bindings, Book)
        ]}
      ]},
     {ssi, "footer.ssi","%%", Bindings}
    ];
gen_reports(Args, Bindings, Book, Name, Report) ->
    BalanceReportL = ?BINDING("BALANCE_REPORT", Bindings),
    ResultReportL = ?BINDING("RESULT_REPORT", Bindings),
    ComparisonL = ?BINDING("COMPARISON", Bindings),
    [
     {ssi, "header.ssi", "%%", Bindings},
     {bindings, Bindings},
     {ehtml,
      case Report of
          "errors" ->
              gen_errors(Bindings, Book);
          "balance" ->
              gen_summary(Bindings, Book, balance, #account.balance, BalanceReportL);
          "result" ->
              gen_summary(Bindings, Book, result, #account.result, ResultReportL);
          "budget" ->
              gen_budget(Bindings, Book);
          "comparison" ->
              gen_summary(Bindings, Book, comparison, #account.result, ComparisonL);
          "journal" ->
              gen_journal(Args, Bindings, Book);
          "ledge" ->
              gen_ledge(Bindings, Book)
      end
     }
    ].

gen_index(Bindings) ->
    ErrorMsgsL = ?BINDING("ERROR_MSGS", Bindings),
    BalanceReportL = ?BINDING("BALANCE_REPORT", Bindings),
    ResultReportL = ?BINDING("RESULT_REPORT", Bindings),
    BudgetL = ?BINDING("BUDGET", Bindings),
    ComparisonL = ?BINDING("COMPARISON", Bindings),
    JournalL = ?BINDING("JOURNAL", Bindings),
    LedgerL = ?BINDING("LEDGER", Bindings),
    PrintoutL = ?BINDING("PRINTOUT", Bindings),
    [
     {ul, [],
      [
       {li,[], [{p,[], [{a, [{href, "#errors"}],
                         {pre_html, accounter:to_html(ErrorMsgsL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#balance"}],
                         {pre_html, accounter:to_html(BalanceReportL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#result"}],
                         {pre_html, accounter:to_html(ResultReportL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#budget"}],
                         {pre_html, accounter:to_html(BudgetL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#comparison"}],
                         {pre_html, accounter:to_html(ComparisonL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#journal"}],
                         {pre_html, accounter:to_html(JournalL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#ledge"}],
                         {pre_html, accounter:to_html(LedgerL)}}]}]},
       {li,[], [{p,[], [{a, [{href, "#print"}],
                         {pre_html, accounter:to_html(PrintoutL)}}]}]}
      ]}
    ].

gen_print(Args, Bindings, Book) ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    ErrorMsgsL = ?BINDING("ERROR_MSGS", Bindings),
    PrintoutL = ?BINDING("PRINTOUT", Bindings),
    BalanceReportL = ?BINDING("BALANCE_REPORT", Bindings),
    ResultReportL = ?BINDING("RESULT_REPORT", Bindings),
    BudgetL = ?BINDING("BUDGET", Bindings),
    ComparisonL = ?BINDING("COMPARISON", Bindings),
    JournalL = ?BINDING("JOURNAL", Bindings),
    LedgerL = ?BINDING("LEDGER", Bindings),
    PrintoutL = ?BINDING("PRINTOUT", Bindings),
    [
     {h3,[], {a, [{name, "print"}],
              {pre_html, [AssociationL, " ", Book#book.name, " - ", PrintoutL]}}},
     {ul, [],
      [
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "errors"}], Args)]}], {pre_html, accounter:to_html(ErrorMsgsL)}}]}]},
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "balance"}], Args)]}], {pre_html, accounter:to_html(BalanceReportL)}}]}]},
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "result"}], Args)]}], {pre_html, accounter:to_html(ResultReportL)}}]}]},
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "budget"}], Args)]}], {pre_html, accounter:to_html(BudgetL)}}]}]},
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "comparison"}], Args)]}], {pre_html, accounter:to_html(ComparisonL)}}]}]},
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "journal"}], Args)]}], {pre_html, accounter:to_html(JournalL)}}]}]},
       {li,[], [{p,[], [{a, [{href, ["reports.yaws", accounter:forward_query([{report, "ledge"}], Args)]}], {pre_html, accounter:to_html(LedgerL)}}]}]}
      ]}
    ].

%%%-------------------------------------------------------------------
%%% Errors
%%%-------------------------------------------------------------------

gen_errors(Bindings, B) when record(B, book), B#book.errors == [] ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    NoErrorMsgsL = ?BINDING("NO_ERROR_MSGS", Bindings),
    [
     {h3,[], {a, [{name, "errors"}],
              {pre_html, [AssociationL, " ", B#book.name, " - ", NoErrorMsgsL]}}}
    ];
gen_errors(Bindings, B) when record(B, book) ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    ErrorMsgsL = ?BINDING("ERROR_MSGS", Bindings),
    TypeL = ?BINDING("TYPE", Bindings),
    IdL = ?BINDING("ID", Bindings),
    ErrorsL = ?BINDING("ERRORS", Bindings),
    DescriptionL = ?BINDING("DESCRIPTION", Bindings),
    [
     {h3,[], {a, [{name, "errors"}],
              {pre_html, [AssociationL, " ", B#book.name, " - ", ErrorMsgsL]}}},
     {table, [{border,2}, {cellspacing,1}, {cellpadding,1},{width,"100%"}],
       [
        {tr, [{border,2}],
         [{th, [{align,left}], {pre_html, accounter:to_html(TypeL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(IdL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(ErrorsL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(DescriptionL)}}
         ]} |
        [
         {tr, [{border,1}],
          [
           {td, [], {pre_html, ?BINDING(string:to_upper(atom_to_list(Type)), Bindings)}},
           {td, [], {a, [{href, "#" ++ key_to_ref(Type, Id) }],
                     {pre_html, accounter:to_html(Id)}}},
           {td, [], {pre_html, accounter:to_html(Val)}},
           {td, [], {pre_html, accounter:to_html(Reason)}}
          ]} || #error{type = Type, id = Id, value = Val, reason = Reason} <- B#book.errors]
        ]}].

key_to_ref(item, Key) ->
    key_to_ref(voucher, Key);
key_to_ref(Type, Key) ->
    atom_to_list(Type) ++ "_" ++ accounter:to_html(Key).

%%%-------------------------------------------------------------------
%%% Journal
%%%-------------------------------------------------------------------

gen_journal(Args, Bindings, B) ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    JournalL = ?BINDING("JOURNAL", Bindings),
    VoucherL = ?BINDING("VOUCHER", Bindings),
    DateL = ?BINDING("DATE", Bindings),
    TextL = ?BINDING("TEXT", Bindings),
    DebitL = ?BINDING("DEBIT", Bindings),
    CreditL = ?BINDING("CREDIT", Bindings),
    AccountL = ?BINDING("ACCOUNT", Bindings),
    [
     {h3,[], {a, [{name, "journal"}],
              {pre_html, [AssociationL, " ", B#book.name, "- ", JournalL]}}},
     {table, [{border,2}, {cellspacing,1},{cellpadding,1},{width,"100%"}],
       [{tr, [{border,0}],
         [
          {th, [{align,left}], {pre_html, accounter:to_html(VoucherL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(DateL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(TextL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(DebitL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(CreditL)}},
          {th, [{align,left}], {pre_html, accounter:to_html(AccountL)}}
         ]},
        [gen_journal_row(Args, B#book.accounts, V) || V <- B#book.vouchers]
       ]}].

gen_journal_row(Args, Accounts, #voucher{id = Vid, date = Date, text = Text, items = Items}) ->
    ItemFun =
        fun(#item{account_id = Aid, amount = Amount, remark = Remark}, N) ->
                Name =
                    case [A || A <- Accounts, A#account.id == Aid] of
                        [] -> "ERROR_REF_BY_ITEM";
                        [A] -> A#account.name
                    end,
                ItemRow =
                    {tr, [{border,0}],
                     [{td, [{colspan,2}, {border,0}], {pre_html, accounter:to_html("")}},
                      {td, [{border,1}], {pre_html, accounter:to_html(Remark)}},
                      to_debit_credit(Amount),
                      {td, [{border,1}],
                       {a, [{href, "#" ++ key_to_ref(account, Aid)}],
                        {pre_html, [accounter:to_html(Aid),
                                    accounter:to_html(" - "),
                                    accounter:to_html(Name)]}}}]},
                {ItemRow, N + 1}
        end,
    {Rows, _} = lists:mapfoldl(ItemFun, 1, Items),
    Vid2 = accounter:to_html(Vid),
    [
     {tr, [],
      [
       {th, [{align,right}],
        {a, [{name, key_to_ref(voucher, Vid)},
             {href, ["register.yaws", accounter:forward_query([{id, Vid2}], Args)]} %% OPT
            ], Vid2}},
       {th, [{align,left}], {pre_html,accounter:to_html(Date)}},
       {th, [{align,left},{colspan,5}], {pre_html,accounter:to_html(Text)}}]},
     Rows
    ].

 to_debit_credit(Amount) ->
    case Amount > 0 of
        true ->
            [{td, [{align,right}, {border,1}], {pre_html, accounter:to_html({kr, Amount})}},
             {td, [{align,right}, {border,1}], {pre_html, accounter:to_html({kr, 0})}}];
        false ->
            [{td, [{align,right}, {border,1}], {pre_html, accounter:to_html({kr, 0})}},
             {td, [{align,right}, {border,1}], {pre_html, accounter:to_html({kr, abs(Amount)})}}]
    end.

%%%-------------------------------------------------------------------
%%% Ledge
%%%-------------------------------------------------------------------

gen_ledge(Bindings, B) ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    LedgeL = ?BINDING("LEDGER", Bindings),
    [
     {h3,[], {a, [{name, "ledge"}],
              {pre_html, [AssociationL, " ", B#book.name, " - ", LedgeL]}}},
     [gen_ledge_rows(Bindings, A, B#book.vouchers) || A <- B#book.accounts]
    ].

gen_ledge_rows(Bindings,
               #account{id = Aid, name = Name, type = Type, desc = Desc, budget = Budget},
               Vouchers) ->
    VoucherFun =
        fun(#voucher{id = Vid, date = Date, text = Text, items = Items}, Acc) ->
                ItemFun =
                    fun(#item{account_id = ItemAid, amount = Amount, remark = Remark},
                        {IN, ID, IC, IB}) ->
                            VoucherAttr = [{href, "#" ++ key_to_ref(voucher, Vid)}],
                            IN2 = IN + 1,
                            IB2 = IB + Amount,
                            {ID2, IC2} =
                                case Amount >= 0 of
                                    true  -> {ID + Amount, IC};
                                    false -> {ID, IC - Amount}
                                end,
                            ItemCols =
                                [
                                 {td, [{border,1},{align, right}],
                                  {a, VoucherAttr, {pre_html, accounter:to_html(Vid)}}},
                                 {td, [{border,1}], {pre_html, accounter:to_html(Date)}},
                                 {td, [{border,1}], {pre_html, accounter:to_html(Text)}},
                                 {td, [{border,1}], {pre_html, accounter:to_html(Remark)}},
                                 to_debit_credit(Amount),
                                 {td, [{border,1}, {align, right}],
                                  {pre_html, accounter:to_html({kr, IB2})}}
                                ],
                            IR = [{tr, [{border,0}], ItemCols}],
                            {IR, {IN2, ID2, IC2, IB2}}
                    end,
                lists:mapfoldl(ItemFun, Acc, [I || I <- Items, I#item.account_id == Aid])
        end,
    {Rows, {VN, VD, VC, VB}} = lists:mapfoldl(VoucherFun, {0, 0, 0, 0}, Vouchers),
    case lists:flatten(Rows) of
        [] when Budget == undefined ->
            [];
        Rows2 ->
            VoucherL = ?BINDING("VOUCHER", Bindings),
            DateL = ?BINDING("DATE", Bindings),
            DebitL = ?BINDING("DEBIT", Bindings),
            TextL = ?BINDING("TEXT", Bindings),
            NoteL = ?BINDING("NOTE", Bindings),
            CreditL = ?BINDING("CREDIT", Bindings),
            BalanceL = ?BINDING("BALANCE", Bindings), 
            NumberOfL = ?BINDING("NUMBER_OF", Bindings),
            SumL = ?BINDING("SUM", Bindings),
            [
             {h4, [],{a, [{name, key_to_ref(account, Aid)}, {href, "#" ++ key_to_ref(summary, Aid)}],
                      {pre_html,
                       [accounter:to_html(Aid), " - ",
                        accounter:to_html(Name),
                        case Desc == [] of
                            true  -> [];
                            false ->  ["&nbsp;(", accounter:to_html(Desc), ")"]
                        end,
                        "&nbsp;-&nbsp;",
                        accounter:to_html(Type)
                       ]}}},
             {table, [{border,2}, {cellspacing,1},{cellpadding,1},{width,"100%"}],
              [
               {tr, [{border,0}],
                [
                 {th, [{align,left}], {pre_html, accounter:to_html(VoucherL)}},
                 {th, [{align,left}], {pre_html, accounter:to_html(DateL)}},
                 {th, [{align,left}], {pre_html, accounter:to_html(TextL)}},
                 {th, [{align,left}], {pre_html, accounter:to_html(NoteL)}},
                 {th, [{align,left}], {pre_html, accounter:to_html(DebitL)}},
                 {th, [{align,left}], {pre_html, accounter:to_html(CreditL)}},
                 {th, [{align,left}], {pre_html, accounter:to_html(BalanceL)}}
                ]},
               Rows2,
               {tr, [{border,2}],
                [
                 {th, [{align,left}], {pre_html, accounter:to_html("")}},
                 {th, [{align,left}], {pre_html, accounter:to_html("")}},
                 {th, [{align,left}], {pre_html, [accounter:to_html(NumberOfL ++ ": "),
                                                  accounter:to_html(VN)]}},
                 {th, [{align,left}], {pre_html, accounter:to_html(SumL)}},
                 {th, [{align,right}], {pre_html, accounter:to_html({kr, VD})}},
                 {th, [{align,right}], {pre_html, accounter:to_html({kr, VC})}},
                 {th, [{align,right}], {pre_html, accounter:to_html({kr, VB})}}
                ]}
              ]
             }
            ]
    end.

%%%-------------------------------------------------------------------
%%% Generate summary
%%%-------------------------------------------------------------------

gen_summary(Bindings, B, SummaryType, SummaryPos, ReportNameL) when atom(SummaryType) ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    TotalL = ?BINDING("TOTAL", Bindings),
    Accounts = [A || A <- B#book.accounts, element(SummaryPos, A) == true],
    Types = lists:sort(sets:to_list(sets:from_list([A#account.type || A <- Accounts]))),
    Mixed = [gen_summary_type(Bindings, B, SummaryType, T, Accounts) || T <- lists:reverse(Types)],
    CalcSum = fun({T, Rows, {Result, Budget, Comparison}}, {AccRows, AccSum}) when T == comparison ->
                      {[Rows | AccRows], AccSum + Comparison};
                 ({T, Rows, {Result, Budget, Comparison}}, {AccRows, AccSum}) ->
                      {[Rows | AccRows], AccSum + Result}
              end,
    {Rows, Total} = lists:foldl(CalcSum, {[], 0}, Mixed),
    [{h3,[], {a, [{name, atom_to_list(SummaryType)}],
              {pre_html, [AssociationL, " ", B#book.name, "- ", ReportNameL]}}},
     Rows,
     {h3, [], {pre_html, [accounter:to_html(TotalL ++ ": "), accounter:to_html({kr, Total})]}}
    ].

gen_summary_type(Bindings, B, SummaryType, T, Accounts) ->
    Accounts2 = [A || A <- Accounts, A#account.type == T],
    Accounts3 = lists:keysort(#account.name, Accounts2),
    Fun = fun(A, {AccTot, AccBud, AccComp}) ->
                  {Row, Total, Budget, Comparison} =
                      gen_summary_account(B, SummaryType, A, B#book.vouchers),
                  {Row, {AccTot + Total, AccBud + Budget, AccComp + Comparison}}
          end,
    {Rows, {Total, Budget, Comparison}} =
        lists:mapfoldl(Fun, {0, 0, 0}, Accounts3),
    Rows2 = gen_summary_table(Bindings, B, SummaryType, T, Rows, Total, Budget, Comparison),
    {SummaryType, Rows2, {Total, Budget, Comparison}}.

gen_summary_table(Bindings, B, comparison, T, Rows, Result, Budget, Comparison) ->
    AccountL = ?BINDING("ACCOUNT", Bindings),
    ResultL = ?BINDING("RESULT", Bindings),
    BudgetL = ?BINDING("BUDGET", Bindings),
    DifferenceL = ?BINDING("DIFFERENCE", Bindings),
    SumL = ?BINDING("SUM", Bindings),
    [
     {h4, [], {pre_html, accounter:to_html(T)}},
     {table, [{border,2}, {cellspacing,1},{cellpadding,1},{width,"100%"}],
      [
       {tr, [{border,0}],
        [
         {th, [{width, "55%"},{align,left}], {pre_html, accounter:to_html(AccountL)}},
         {th, [{width, "15%"},{align,left}], {pre_html, accounter:to_html(ResultL)}},
         {th, [{width, "15%"},{align,left}], {pre_html, accounter:to_html(BudgetL)}},
         {th, [{width, "15%"},{align,left}], {pre_html, accounter:to_html(DifferenceL)}}
        ]
       },
       Rows,
       {tr, [{border,0}],
        [
         {th, [{align,left}], {pre_html, accounter:to_html(SumL)}},
         {th, [{align,right}], {pre_html, accounter:to_html({kr, negate(B, T, Result)})}},
         {th, [{align,right}], {pre_html, accounter:to_html({kr, negate(B, T, Budget)})}},
         {th, [{align,right}], {pre_html, accounter:to_html({kr, negate(B, T, Comparison)})}}
        ]
       }
      ]
     }
    ];
gen_summary_table(Bindings, B, SummaryType, T, Rows, Summary, _Budget, _Comparison) ->
    AccountL = ?BINDING("ACCOUNT", Bindings),
    BalanceL = ?BINDING("BALANCE", Bindings),
    SumL = ?BINDING("SUM", Bindings),
    [
     {h4, [], {pre_html, accounter:to_html(T)}},
     {table, [{border,2}, {cellspacing,1},{cellpadding,1},{width,"70%"}],
      [
       {tr, [{border,0}],
        [
         {th, [{width, "75%"},{align,left}], {pre_html, accounter:to_html(AccountL)}},
         {th, [{width, "25%"},{align,left}], {pre_html, accounter:to_html(BalanceL)}}
        ]
       },
       Rows,
       {tr, [{border,0}],
        [
         {th, [{align,left}], {pre_html, accounter:to_html(SumL)}},
         {th, [{align,right}], {pre_html, accounter:to_html({kr, negate(B, T, Summary)})}}
        ]
       }
      ]
     }
    ].

gen_summary_account(B, SummaryType, #account{id = Aid, name = Name, type = T, budget = Budget},
                    Vouchers) ->
    ItemFun =
        fun(#item{amount = Amount}, Summary) ->
                Summary + Amount
        end,
    VoucherFun =
        fun(#voucher{items = Items}, Summary) ->
                lists:foldl(ItemFun, Summary, [I || I <- Items, I#item.account_id == Aid])
        end,
    case lists:foldl(VoucherFun, 0, Vouchers) of
        0 when Budget == undefined ->
            {[], 0, 0, 0};
        Summary ->
            Attrs = [{href, "#" ++ key_to_ref(account, Aid)}, {name, key_to_ref(summary, Aid)}],
            {Cols, BudSum, CompSum} = gen_comparison_cols(B, SummaryType, T, Summary, Budget),
            Row = {tr, [{border,0}],
                   [{td, [{border,0}], {a, Attrs, {pre_html, accounter:to_html(Name)}}},
                    {td, [{border,0},{align,right}],
                     {pre_html, accounter:to_html({kr, negate(B, T, Summary)})}},
                    Cols
                   ]},
            {Row, Summary, BudSum, CompSum}
    end.

gen_comparison_cols(B, comparison, T, Result, undefined) ->
    gen_comparison_cols(B, comparison, T, Result, 0);
gen_comparison_cols(B, comparison, T, Result, Budget) ->
    Comparison = Result - Budget,
    Cols = [{td, [{border,0},{align,right}],
             {pre_html, accounter:to_html({kr, negate(B, T, Budget)})}},
            {td, [{border,0},{align,right}],
             {pre_html, accounter:to_html({kr, negate(B, T, Comparison)})}}],
    {Cols, Budget, Comparison};
gen_comparison_cols(_, _, _, Result, _) ->
    {[], 0, 0}.

%%%-------------------------------------------------------------------
%%% Budget
%%%-------------------------------------------------------------------

gen_budget(Bindings, B) ->
    AssociationL = ?BINDING("ASSOCIATION", Bindings),
    BudgetL = ?BINDING("BUDGET", Bindings),
    TotalL = ?BINDING("TOTAL", Bindings),
    Accounts = [A || A <- B#book.accounts, A#account.budget /= undefined],
    Types = lists:sort(sets:to_list(sets:from_list([A#account.type || A <- Accounts]))),
    Mixed = [gen_budget_type(Bindings, B, T, Accounts) ||  T <- Types],
    CalcSum = fun({Rows, Sum}, {AccRows, AccSum}) -> {[Rows | AccRows], AccSum + Sum} end,
    {Rows, Total} = lists:foldl(CalcSum, {[], 0}, Mixed),
    [
     {h3,[], {a, [{name, "budget"}],
              {pre_html, [AssociationL, " ", B#book.name, " - ", BudgetL]}}},
     Rows,
     {h3, [], {pre_html, [accounter:to_html(TotalL ++ ": "), accounter:to_html({kr, -Total})]}}
    ].

gen_budget_type(Bindings, B, T, Accounts) ->
    AccountL = ?BINDING("ACCOUNT", Bindings),
    BalanceL = ?BINDING("BALANCE", Bindings),
    CalcSum =
        fun(#account{budget = Val, type = X}, Acc) when X == T->
                      Acc + Val;
                 (_, Acc) ->
                      Acc
              end,
    Sum = lists:foldl(CalcSum, 0, Accounts),
    Rows =
        [
         {h4, [], {pre_html, accounter:to_html(T)}},
         {table, [{border,2}, {cellspacing,1},{cellpadding,1},{width,"70%"}],
          [{tr, [{border,0}],
            [{th, [{width, "75%"},{align,left}], {pre_html, accounter:to_html(AccountL)}},
             {th, [{width, "25%"},{align,left}], {pre_html, accounter:to_html(BalanceL)}}]},
           [{tr, [{border,0}],
             [{td, [{align, left}], {a, [{href, "#" ++ key_to_ref(account, A#account.id)}],
               {pre_html, accounter:to_html(A#account.name)}}}       ,
              {td, [{align, right}],
               {pre_html, accounter:to_html({kr, negate(B, T, A#account.budget)})}}]
            } || A <- lists:keysort(#account.name, [X || X <- Accounts, X#account.type == T])],
           {tr, [{border,2}],
            [{th, [{align,left}], {pre_html, accounter:to_html(Sum)}},
             {th, [{align,right}], {pre_html, accounter:to_html({kr, negate(B, T, Sum)})}}]
           }
          ]}],
    {Rows, Sum}.

negate(B, Type, Value) ->
    Neg = [negate || AT <- B#book.types,
                     AT#account_type.name == Type,
                     AT#account_type.negate == true],
    case Neg == [] of
        true -> Value;
        false -> -Value
    end.

</erl>

<html>
